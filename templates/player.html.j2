<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <link rel="stylesheet" href="{{ url_for('static', filename='css/bootstrap.min.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/custom.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/all.css') }}">

    <title>Quizit</title>
  </head>
  <body>
    <div id="app">
      <nav class="navbar navbar-dark" :class="{ 'bg-primary': connected, 'bg-danger': !connected }">
        <a class="navbar-brand" href="#">Quizit</a>
        <span class="navbar-text">
          !{ profile.name } <span v-if="profile.team">(!{ teamObj.name })</span>
          <i class="fas" :class="{ 'fa-link': connected, 'fa-unlink': !connected }"></i>
          <i style="font-family: monospace;" v-if="$socket.id">!{ $socket.id.substring(0, 4) }</i>
        </span>
      </nav>

      <section id="setup" v-if="!profile.name || !profile.team || !ready">
        <div class="container">
          <h3>Welcome to Quizit!</h3>
          <p class="lead">
            To get started, you will need to tell us your name and what group you are in. Make sure that you use a name that
            other people will know you as. Once you've done that, hit the ready button.
          </p>
          <div class="form-group">
            <label for="name">Name</label>
            <input type="email" class="form-control" id="name" v-model="profile.name" :disabled="ready">
          </div>
          <div class="form-group">
            <label for="team">Team</label>
            <select class="form-control" id="team" v-model="profile.team" :disabled="ready">
              <option v-for="team in teams" :key="team.id" :value="team.id">!{ team.name }</option>
            </select>
          </div>
          <p class="text-danger"><i class="fas fa-exclamation-triangle"></i> Once you ready, you cannot unready! Make sure that your name and team are correct.</p>
          <button type="button" class="btn btn-lg btn-block btn-success" v-on:click="ready = true" :disabled="!profile.name || !profile.team"><i class="fas fa-check"></i> Ready</button>
        </div>
      </section>

      <section id="countdown" v-else-if="startCountdown >= 0">
        <div class="container">
          <p class="lead">Here is the question for the next round. Have a read before the answers come up.</p>
          <h3>!{ question.prompt }</h3>
          <div class="progress" style="height: 30px;" v-if="originalStartCountdown >= 0">
            <div class="progress-bar bg-primary" role="progressbar" :style="'width: ' + ((startCountdown / originalStartCountdown) * 100) + '%;'">!{ startCountdown } seconds left!</div>
          </div>
        </div>
      </section>

      <section id="question" v-else-if="answerCountdown >= 0 && startCountdown < 0">
        <div class="container">
          <h3>!{ question.prompt }</h3>
          <p class="lead">Pick an answer below. You have !{ answerCountdown } seconds left to choose.</p>

          <div class="progress mb-4 mt-4">
            <div class="progress-bar bg-secondary" role="progressbar" :style="'width: ' + ((answerCountdown / originalAnswerCountdown) * 100) + '%;'">!{ answerCountdown <= 0 ? '0' : answerCountdown } seconds left!</div>
          </div>

          <div id="answer-choice" v-if="question.type == 'choice'">
            <button type="button" class="btn btn-primary btn-lg btn-block" v-for="answer in question.answers" v-on:click="submitAnswer(answer)">!{ answer }</button>
          </div>
          <div id="answer-unsupported" v-else>
            <p class="text-center text-danger lead"><i>Unsupported Question Type!</i></p>
          </div>
        </div>
      </section>

      <section id="idle" v-else>
        <div class="container">
          <h3>Sit back and relax.</h3>
          <p class="lead">A question will arrive on your device shortly...</p>

          <div class="alert" :class="{ 'alert-success': feedback.correct, 'alert-danger': !feedback.correct }" role="alert" v-if="showFeedback">
            <span v-if="feedback.correct"><i class="fas fa-check"></i> Congrats! You got the last question correct and scored <b>!{ feedback.score }</b> points!</span>
            <span v-else><i class="fas fa-times"></i> Aww! You got the last question wrong.</span>
          </div>

          <div v-if="showFeedback">
            <p>You have <b>!{ currentPlayerPoints } points</b> and are currently in <b>!{ currentPlayerPosition | ordinal }</b> position.</p>
            <p>Your team has <b>!{ currentTeamPoints } points</b> and your team is currently in <b>!{ currentTeamPosition | ordinal }</b> position.</p>
          </div>

          <div v-if="!question">
            <p>Hello !{ profile.name }, you are in !{ teamObj.name }. <i>Incorrect? Unready below</i></p>
            <button type="button" class="btn btn-lg btn-block btn-danger" v-on:click="ready = false"><i class="fas fa-times"></i> Unready</button>
          </div>
        </div>
      </section>

      <section id="status">
        <div class="container">
          <h1>Status</h1>
          <ul>
            <li><b>Connection Status:</b> !{ connected ? 'Connected' : 'Disconnected' }</li>
            <li><b>Connection ID:</b> <code>!{ $socket.id }</code></li>
            <li><b>Question:</b> <i v-if="!question">n/a</i></li>
            <ul v-if="question">
              <li><b>Type:</b> !{ question.type }</li>
              <li><b>Prompt:</b> !{ question.prompt }</li>
              <li><b>Answers:</b> !{ question.answers }</li>
              <li>
                <b>Countdown:</b>
                <span v-if="startCountdown >= 0">!{ startCountdown } seconds to prepare!</span>
                <span v-else-if="answerCountdown >= 0">!{ answerCountdown } seconds to answer!</span>
                <span v-else>Question finished!</span>
              </li>
            </ul>
          </ul>
        </div>
      </section>
    </div>

    <script src="{{ url_for('static', filename='js/jquery-3.3.1.slim.min.js') }}"></script>
    <script src="{{ url_for('static', filename='js/popper.min.js') }}"></script>
    <script src="{{ url_for('static', filename='js/bootstrap.min.js') }}"></script>
    <script src="{{ url_for('static', filename='js/vue.js') }}"></script>
    <script src="{{ url_for('static', filename='js/es6-promise.auto.js') }}"></script>
    <script src="{{ url_for('static', filename='js/vue-socketio.js') }}"></script>
    <script>
      Vue.use(new VueSocketIO({
        debug: true,
        connection: "http://" + document.domain + ":" + location.port
      }));

      var app = new Vue({
        delimiters: ["!{", "}"],
        el: '#app',
        data: {
          teams: {{ config.teams }},
          profile: {
            name: "",
            team: ""
          },
          guid: "",
          ready: false,
          connected: false,
          question: false,
          startCountdown: -1,
          originalStartCountdown: -1,
          answerCountdown: -1,
          originalAnswerCountdown: -1,
          timer: null,
          navStatus: 0,
          feedback: {
            correct: false,
            score: 0
          },
          showFeedback: false,
          showLeaderboard: false,
          leaderboard: {
            player: [],
            team: []
          }
        },
        sockets: {
          connect() {
            this.connected = true;

            if (this.profile.name && this.profile.team) {
              console.log("Sending ready event...");
              this.readyEvent(this.ready);
            }
          },
          disconnect() {
            this.connected = false;
          },
          next_question(data) {
            if (this.question == false) this.question = {};
            this.$set(this.question, "prompt", data.prompt);
            this.$set(this.question, "answers", this.shuffle(data.answers));
            this.$set(this.question, "type", data.type);
            this.showFeedback = false;
          },
          start_question(data) {
            console.log("SQ", data);
            this.originalStartCountdown = data.start_time;
            this.startCountdown = data.start_time;
            this.originalAnswerCountdown = data.answer_time;
            this.answerCountdown = data.answer_time;
            this.startTimer();
          },
          set_player(data) {
            console.log("Fetch success!");
            this.profile.name = data.name || this.profile.name;
            this.profile.team = data.team || this.profile.team;
            this.ready = data.ready || this.ready;
            this.guid = data.guid || this.ready;
          },
          answer_feedback(data) {
            if (data.show) {
              this.showFeedback = true;
              this.fetchLeaderboard();
            } else {
              this.feedback = data;
            }
          },
          leaderboard(data) {
            this.leaderboard = data;
          }
        },
        methods: {
          fetchLeaderboard() {
            this.$socket.emit("player_command", {
              action: "leaderboard"
            })
          },
          genGuid() {
            function _p8(s) {
              var p = (Math.random().toString(16)+"000000000").substr(2,8);
              return s ? "-" + p.substr(0,4) + "-" + p.substr(4,4) : p ;
            }
            return _p8() + _p8(true) + _p8(true) + _p8();
          },
          shuffle(a) {
            var j, x, i;
            for (i = a.length - 1; i > 0; i--) {
                j = Math.floor(Math.random() * (i + 1));
                x = a[i];
                a[i] = a[j];
                a[j] = x;
            }
            return a;
          },
          startTimer() {
            this.timer = setInterval(() => this.countdown(), 1000);
          },
          stopTimer() {
            clearInterval(this.timer);
            this.timer = null;
          },
          countdown() {
            if (!this.timer) return;
            if (this.startCountdown >= 0) {
              this.startCountdown--;
              return;
            }
            if (this.answerCountdown >= 0) {
              this.answerCountdown--;
              return;
            }
            this.stopTimer();
          },
          submitAnswer(answer) {
            this.$socket.emit("player_command", {
              action: "answer",
              answer: answer,
              answerTime: this.answerCountdown
            });
            this.stopTimer();
            this.startCountdown = -1;
            this.answerCountdown = -1;
          },
          readyEvent(ready) {
            console.log("Sending player ready event!");
            this.$socket.emit("player_command", {
              action: "ready",
              ready: ready,
              name: this.profile.name,
              team: this.profile.team,
              guid: this.guid
            });
          },
          teamInfo(id) {
            return this.teams.find(x => x.id == id);
          }
        },
        computed: {
          teamObj() {
            return this.teamInfo(this.profile.team);
          },
          currentPlayerPoints() {
            var player = this.leaderboard.player.find(x => x.guid == this.guid);
            return (player ? player.score : 0);
          },
          currentPlayerPosition() {
            var player = this.leaderboard.player.find(x => x.guid == this.guid);
            var position = this.leaderboard.player.indexOf(player);
            return position + 1;
          },
          currentTeamPoints() {
            var team = this.leaderboard.team.find(x => x.team == this.profile.team);
            return (team ? team.score : 0);
          },
          currentTeamPosition() {
            var team = this.leaderboard.team.find(x => x.team == this.profile.team);
            var position = this.leaderboard.team.indexOf(team);
            return position + 1;
          }
        },
        watch: {
          ready(val) {
            this.readyEvent(val);
          }
        },
        mounted() {
          if (localStorage.guid) {
            console.log("GUID loaded from local storage!");
            this.guid = localStorage.guid;
            console.log("Attempting to load state from game server...");
            this.$socket.emit("player_command", {
              action: "fetch",
              guid: this.guid
            });
          } else {
            var g = this.genGuid();
            console.log("Generated new GUID " + g);
            this.guid = g;
            localStorage.guid = g;
          }
        },
        filters: {
          ordinal: function(i) {
            if (!i) return "";
            var j = i % 10,
            k = i % 100;
            if (j == 1 && k != 11) {
                return i + "st";
            }
            if (j == 2 && k != 12) {
                return i + "nd";
            }
            if (j == 3 && k != 13) {
                return i + "rd";
            }
            return i + "th";
          }
        }
      });
    </script>
  </body>
</html>